"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8107],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,f=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return t?a.createElement(f,i(i({ref:n},d),{},{components:t})):a.createElement(f,i({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},687:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var a,r=t(7462),o=t(3366),i=(t(7294),t(3905)),l={sidebar_position:11,title:"Displaying Radar Maps on iOS"},s=void 0,p={unversionedId:"tutorials/displaying-radar-maps-on-ios",id:"tutorials/displaying-radar-maps-on-ios",isDocsHomePage:!1,title:"Displaying Radar Maps on iOS",description:"To create a map on iOS, add MapLibre Native to your Xcode project.",source:"@site/docs/tutorials/displaying-radar-maps-on-ios.mdx",sourceDirName:"tutorials",slug:"/tutorials/displaying-radar-maps-on-ios",permalink:"/tutorials/displaying-radar-maps-on-ios",editUrl:"https://github.com/radarlabs/docs/edit/main/docs/tutorials/displaying-radar-maps-on-ios.mdx",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,title:"Displaying Radar Maps on iOS"},sidebar:"defaultSidebar",previous:{title:"Migrating from Google Maps",permalink:"/tutorials/migrate-from-google-maps"},next:{title:"Displaying Radar Maps on Android",permalink:"/tutorials/displaying-radar-maps-on-android"}},d=[],c=(a="Alert",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),u={toc:d};function m(e){var n=e.components,a=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"To create a map on iOS, add ",(0,i.kt)("a",{parentName:"p",href:"https://maplibre.org/maplibre-native/ios/latest/documentation/maplibre"},"MapLibre Native")," to your Xcode project."),(0,i.kt)("p",null,"Then, add assets for the Radar logo and optionally for a marker. You can download assets ",(0,i.kt)("a",{target:"_blank",href:t(2426).Z},"here"),"."),(0,i.kt)("p",null,"Finally, add a ",(0,i.kt)("inlineCode",{parentName:"p"},"MapView")," to a ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewController")," with a Radar style URL that includes your publishable key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'import SwiftUI\nimport MapLibre\n\nstruct MapView: UIViewRepresentable {\n    \n    func makeCoordinator() -> MapView.Coordinator {\n        Coordinator(self)\n    }\n    \n    func makeUIView(context: Context) -> MLNMapView {\n        // create a map\n\n        let style = "radar-default-v1"\n        let publishableKey = "prj_live_pk_..."\n        let styleURL = URL(string: "https://api.radar.io/maps/styles/\\(style)?publishableKey=\\(publishableKey)")\n\n        let mapView = MLNMapView(frame: .zero, styleURL: styleURL)\n        mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight]\n        mapView.logoView.isHidden = true\n\n        mapView.setCenter(\n          CLLocationCoordinate2D(latitude: 40.7342, longitude: -73.9911),\n          zoomLevel: 11,\n          animated: false\n        )\n        \n        // add the Radar logo\n\n        let logoImageView = UIImageView(image: UIImage(named: "radar-logo"))\n        logoImageView.translatesAutoresizingMaskIntoConstraints = false\n        mapView.addSubview(logoImageView)\n\n        NSLayoutConstraint.activate([\n            logoImageView.bottomAnchor.constraint(equalTo: mapView.safeAreaLayoutGuide.bottomAnchor, constant: -10),\n            logoImageView.leadingAnchor.constraint(equalTo: mapView.safeAreaLayoutGuide.leadingAnchor, constant: 10),\n            logoImageView.widthAnchor.constraint(equalToConstant: 74),\n            logoImageView.heightAnchor.constraint(equalToConstant: 26)\n        ])\n\n        mapView.delegate = context.coordinator\n\n        return mapView\n    }\n    \n    func updateUIView(_ uiView: MLNMapView, context: Context) {\n\n    }\n    \n    // add a marker on map load\n\n    class Coordinator: NSObject, MLNMapViewDelegate {\n        var control: MapView\n\n        init(_ control: MapView) {\n            self.control = control\n        }\n\n        func mapView(_ mapView: MLNMapView, didFinishLoading style: MLNStyle) {\n            addMarker(style: style, coordinate: CLLocationCoordinate2D(latitude: 40.7342, longitude: -73.9911))\n        }\n\n        func addMarker(style: MLNStyle, coordinate: CLLocationCoordinate2D) {\n            let point = MLNPointAnnotation()\n            point.coordinate = coordinate\n\n            let shapeSource = MLNShapeSource(identifier: "marker-source", shape: point, options: nil)\n\n            let shapeLayer = MLNSymbolStyleLayer(identifier: "marker-style", source: shapeSource)\n\n            if let image = UIImage(named: "default-marker") {\n                style.setImage(image, forName: "marker")\n            }\n\n            shapeLayer.iconImageName = NSExpression(forConstantValue: "marker")\n\n            style.addSource(shapeSource)\n            style.addLayer(shapeLayer)\n        }\n    }\n}\n')),(0,i.kt)(c,{alertType:"info",mdxType:"Alert"},"Adding a Radar logo to the map is required in our ",(0,i.kt)("a",{href:"https://radar.com/terms"},"Terms of Use"),"."))}m.isMDXComponent=!0},2426:function(e,n,t){n.Z=t.p+"assets/files/radar-map-assets-10a2451b64cea4d72fffe99b24b208e8.zip"}}]);