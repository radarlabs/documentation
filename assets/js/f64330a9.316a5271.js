"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7441],{3905:function(n,a,e){e.d(a,{Zo:function(){return s},kt:function(){return c}});var t=e(7294);function r(n,a,e){return a in n?Object.defineProperty(n,a,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[a]=e,n}function o(n,a){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(n,a).enumerable}))),e.push.apply(e,t)}return e}function i(n){for(var a=1;a<arguments.length;a++){var e=null!=arguments[a]?arguments[a]:{};a%2?o(Object(e),!0).forEach((function(a){r(n,a,e[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(a){Object.defineProperty(n,a,Object.getOwnPropertyDescriptor(e,a))}))}return n}function p(n,a){if(null==n)return{};var e,t,r=function(n,a){if(null==n)return{};var e,t,r={},o=Object.keys(n);for(t=0;t<o.length;t++)e=o[t],a.indexOf(e)>=0||(r[e]=n[e]);return r}(n,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)e=o[t],a.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var l=t.createContext({}),d=function(n){var a=t.useContext(l),e=a;return n&&(e="function"==typeof n?n(a):i(i({},a),n)),e},s=function(n){var a=d(n.components);return t.createElement(l.Provider,{value:a},n.children)},m={inlineCode:"code",wrapper:function(n){var a=n.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(n,a){var e=n.components,r=n.mdxType,o=n.originalType,l=n.parentName,s=p(n,["components","mdxType","originalType","parentName"]),u=d(e),c=r,y=u["".concat(l,".").concat(c)]||u[c]||m[c]||o;return e?t.createElement(y,i(i({ref:a},s),{},{components:e})):t.createElement(y,i({ref:a},s))}));function c(n,a){var e=arguments,r=a&&a.mdxType;if("string"==typeof n||r){var o=e.length,i=new Array(o);i[0]=u;var p={};for(var l in a)hasOwnProperty.call(a,l)&&(p[l]=a[l]);p.originalType=n,p.mdxType="string"==typeof n?n:r,i[1]=p;for(var d=2;d<o;d++)i[d]=e[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,e)}u.displayName="MDXCreateElement"},5033:function(n,a,e){e.r(a),e.d(a,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return s},default:function(){return c}});var t,r=e(7462),o=e(3366),i=(e(7294),e(3905)),p={sidebar_position:12,title:"Displaying Radar Maps on Android"},l=void 0,d={unversionedId:"tutorials/displaying-radar-maps-on-android",id:"tutorials/displaying-radar-maps-on-android",isDocsHomePage:!1,title:"Displaying Radar Maps on Android",description:"To create a map on Android, add MapLibre Native to the dependencies section of your app's build.gradle file. Optionally, add the MapLibre Annotation Plugin to add a marker to the map:",source:"@site/docs/tutorials/displaying-radar-maps-on-android.mdx",sourceDirName:"tutorials",slug:"/tutorials/displaying-radar-maps-on-android",permalink:"/tutorials/displaying-radar-maps-on-android",editUrl:"https://github.com/radarlabs/docs/edit/main/docs/tutorials/displaying-radar-maps-on-android.mdx",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12,title:"Displaying Radar Maps on Android"},sidebar:"defaultSidebar",previous:{title:"Displaying Radar Maps on iOS",permalink:"/tutorials/displaying-radar-maps-on-ios"},next:{title:"Displaying Radar Maps with React Native",permalink:"/tutorials/displaying-radar-maps-with-react-native"}},s=[],m=(t="Alert",function(n){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}),u={toc:s};function c(n){var a=n.components,t=(0,o.Z)(n,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"To create a map on Android, add ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/maplibre/maplibre-native"},"MapLibre Native")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"dependencies")," section of your app's ",(0,i.kt)("inlineCode",{parentName:"p"},"build.gradle")," file. Optionally, add the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/maplibre/maplibre-plugins-android"},"MapLibre Annotation Plugin")," to add a marker to the map:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gradle"},"dependencies {\n    implementation 'org.maplibre.gl:android-sdk:11.0.0'\n    implementation 'org.maplibre.gl:android-plugin-annotation-v9:3.0.0' // optional import for adding a marker\n}\n")),(0,i.kt)("p",null,"Import assets for the Radar logo and optionally for a marker. You can download assets ",(0,i.kt)("a",{target:"_blank",href:e(2426).Z},"here"),"."),(0,i.kt)("p",null,"Then, add a ",(0,i.kt)("inlineCode",{parentName:"p"},"MapView")," with the Radar logo to your layout:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <org.maplibre.android.maps.MapView\n        android:id="@+id/mapView"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        />\n\n    <ImageView\n        android:id="@+id/overlayImageView"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:src="@drawable/radar_logo"\n        app:layout_constraintBottom_toBottomOf="@id/mapView"\n        app:layout_constraintStart_toStartOf="@id/mapView"\n        android:layout_marginBottom="10dp"\n        android:layout_marginStart="10dp" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n')),(0,i.kt)("p",null,"Finally, add a ",(0,i.kt)("inlineCode",{parentName:"p"},"MapView")," in your ",(0,i.kt)("inlineCode",{parentName:"p"},"Activity")," with a Radar style URL that includes your publishable key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'import android.os.Bundle\nimport android.view.Gravity\nimport android.view.LayoutInflater\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.content.res.ResourcesCompat\nimport androidx.core.graphics.drawable.toBitmap\n\nimport org.maplibre.android.MapLibre\nimport org.maplibre.android.camera.CameraPosition\nimport org.maplibre.android.geometry.LatLng\nimport org.maplibre.android.maps.MapLibreMap\nimport org.maplibre.android.maps.MapView\n\n// optional import for adding a marker\nimport org.maplibre.android.plugins.annotation.SymbolManager\nimport org.maplibre.android.plugins.annotation.SymbolOptions\n\nconst val MARKER_NAME = "radar-marker"\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var mapView: MapView\n    private lateinit var mapLibreMap: MapLibreMap\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        // create a map\n        val style = "radar-default-v1"\n        val publishableKey = "prj_live_pk_..."\n        val styleURL = "https://api.radar.io/maps/styles/$style?publishableKey=$publishableKey"\n\n        MapLibre.getInstance(this)\n\n        val inflater = LayoutInflater.from(this)\n        val rootView = inflater.inflate(R.layout.activity_main, null)\n        setContentView(rootView)\n\n        mapView = rootView.findViewById(R.id.mapView)\n\n        mapView.getMapAsync { map ->\n            mapLibreMap = map\n\n            // add the Radar logo\n            map.uiSettings.isLogoEnabled = false\n\n            map.uiSettings.attributionGravity = Gravity.RIGHT + Gravity.BOTTOM\n            map.uiSettings.setAttributionMargins(0, 0, 24, 24)\n\n            map.setStyle(styleURL) {style ->\n\n                // optionally add a marker to the map on style load\n                val infoIconDrawable = ResourcesCompat.getDrawable(\n                    this.resources,\n                    // use imported marker resource\n                    R.drawable.default_marker,\n                    null\n                )!!\n\n                // create marker icon bmp\n                val bitmapMarker = infoIconDrawable.toBitmap()\n                style.addImage(MARKER_NAME, bitmapMarker)\n\n                val symbolManager = SymbolManager(mapView, map, style)\n\n                // disable symbol collisions to draw over map style symbols like POIs and labels\n                symbolManager.iconAllowOverlap = true\n                symbolManager.iconIgnorePlacement = true\n\n                val symbol = symbolManager.create(\n                    SymbolOptions()\n                        .withLatLng(LatLng(40.7342,-73.9911))\n                        .withIconImage(MARKER_NAME)\n                        .withIconSize(1.25f)\n                        .withIconAnchor("bottom")\n                )\n                symbolManager.update(symbol)\n\n                // set camera position to symbol latlng\n                map.cameraPosition = CameraPosition.Builder()\n                    .target(symbol.latLng)\n                    .zoom(11.0)\n                    .build()\n            }\n        }\n    }\n\n    override fun onStart() {\n        super.onStart()\n        mapView.onStart()\n    }\n\n    override fun onResume() {\n        super.onResume()\n        mapView.onResume()\n    }\n\n    override fun onPause() {\n        super.onPause()\n        mapView.onPause()\n    }\n\n    override fun onStop() {\n        super.onStop()\n        mapView.onStop()\n    }\n\n    override fun onLowMemory() {\n        super.onLowMemory()\n        mapView.onLowMemory()\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        mapView.onDestroy()\n    }\n\n    override fun onSaveInstanceState(outState: Bundle) {\n        super.onSaveInstanceState(outState)\n        mapView.onSaveInstanceState(outState)\n    }\n}\n')),(0,i.kt)(m,{alertType:"info",mdxType:"Alert"},"Adding a Radar logo to the map is required in our ",(0,i.kt)("a",{href:"https://radar.com/terms"},"Terms of Use"),"."))}c.isMDXComponent=!0},2426:function(n,a,e){a.Z=e.p+"assets/files/radar-map-assets-10a2451b64cea4d72fffe99b24b208e8.zip"}}]);