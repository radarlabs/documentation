"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2199],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=i,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||r;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},970:function(e,t,n){n.d(t,{Z:function(){return p}});var a=n(7294),i="alert_19nB",r="alertWarning_1tiz",o="alertInfo_1EfW",s="alertTip_1W6d",l="alertSuccess_7EZp",p=function(e){var t=e.children,n=e.alertType;return"warning"===n?a.createElement("div",{className:"alert "+i+" "+r,role:"alert"},t):"info"===n?a.createElement("div",{className:"alert "+i+" "+o,role:"alert"},t):"tip"===n?a.createElement("div",{className:"alert "+i+" "+s,role:"alert"},t):"success"===n?a.createElement("div",{className:"alert "+i+" "+l,role:"alert"},t):null}},8805:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=n(970),s={sidebar_position:3,title:"Building a delivery tracking app"},l=void 0,p={unversionedId:"tutorials/building-a-delivery-tracking-app",id:"tutorials/building-a-delivery-tracking-app",isDocsHomePage:!1,title:"Building a delivery tracking app",description:"In this tutorial, we will build a delivery tracking iOS application which uses Trips to monitor deliveries with live location tracking, progress notifications, and ETAs. The full source code for the project is ready to clone and run in the section below. This tutorial will walk step-by-step through setting up and using Radar's location building blocks to rebuild this sample app, which allows the user to dispatch upcoming deliveries and monitor their progress from start to completion.",source:"@site/docs/tutorials/building-a-delivery-tracking-app.mdx",sourceDirName:"tutorials",slug:"/tutorials/building-a-delivery-tracking-app",permalink:"/tutorials/building-a-delivery-tracking-app",editUrl:"https://github.com/radarlabs/docs/edit/main/docs/tutorials/building-a-delivery-tracking-app.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Building a delivery tracking app"},sidebar:"defaultSidebar",previous:{title:"Building an app with location-enabled curbside pickup",permalink:"/tutorials/building-an-app-with-location-enabled-curbside-pickup"},next:{title:"Building a store locator on iOS",permalink:"/tutorials/building-a-store-locator-on-ios"}},c=[{value:"Source code",id:"source-code",children:[]},{value:"Languages used",id:"languages-used",children:[]},{value:"Features used",id:"features-used",children:[]},{value:"Steps",id:"steps",children:[{value:"Step 1: Set up your Radar account",id:"step-1-set-up-your-radar-account",children:[]},{value:"Step 2: Install the Radar iOS SDK",id:"step-2-install-the-radar-ios-sdk",children:[]},{value:"Step 3: Initialize the SDK",id:"step-3-initialize-the-sdk",children:[]},{value:"Step 4: Request location permissions",id:"step-4-request-location-permissions",children:[]},{value:"Checkpoint: Launch app and grant location permissions!",id:"checkpoint-launch-app-and-grant-location-permissions",children:[]},{value:"Step 5: Add trip start logic",id:"step-5-add-trip-start-logic",children:[]},{value:"Step 6: Add trip completion logic",id:"step-6-add-trip-completion-logic",children:[]},{value:"Checkpoint: Create a trip!",id:"checkpoint-create-a-trip",children:[]},{value:"Step 7: Send trip update notifications",id:"step-7-send-trip-update-notifications",children:[]},{value:"Step 8: Display live map location and ETA",id:"step-8-display-live-map-location-and-eta",children:[]},{value:"Step 9: Next steps",id:"step-9-next-steps",children:[]}]},{value:"Support",id:"support",children:[]}],d={toc:c};function u(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this tutorial, we will build a delivery tracking iOS application which uses ",(0,r.kt)("a",{parentName:"p",href:"/trip-tracking"},"Trips")," to monitor deliveries with live location tracking, progress notifications, and ETAs. The full source code for the project is ready to clone and run in the section below. This tutorial will walk step-by-step through setting up and using Radar's location building blocks to rebuild this sample app, which allows the user to dispatch upcoming deliveries and monitor their progress from start to completion."),(0,r.kt)("h2",{id:"source-code"},"Source code"),(0,r.kt)("p",null," ",(0,r.kt)("a",{className:"btn btn-large btn-primary",href:"https://github.com/radarlabs/deliverytracker"},"GitHub Repo")," "),(0,r.kt)("h2",{id:"languages-used"},"Languages used"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Swift")),(0,r.kt)("h2",{id:"features-used"},"Features used"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/trip-tracking"},"Trip tracking")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/geofences"},"Geofences"))),(0,r.kt)("h2",{id:"steps"},"Steps"),(0,r.kt)("h3",{id:"step-1-set-up-your-radar-account"},"Step 1: Set up your Radar account"),(0,r.kt)("p",null,"You will need a Radar account to get started with the location building blocks used in this application. ",(0,r.kt)("a",{parentName:"p",href:"https://radar.com/login"},"Log in")," to your account, or ",(0,r.kt)("a",{parentName:"p",href:"https://radar.com/signup"},"Sign up")," for a free account if you don't have one yet."),(0,r.kt)("p",null,"Find your API keys on the ",(0,r.kt)("a",{parentName:"p",href:"https://radar.com/dashboard"},"Get Started")," page. We will be using your Test publishable (client) key in the iOS app."),(0,r.kt)("p",null," ",(0,r.kt)("a",{className:"btn btn-large btn-primary",href:"https://radar.com/signup"},"Get API keys")," "),(0,r.kt)("p",null,"Finally, let's create your first geofences if you haven't done so already. We will use them as trip destinations during app development and testing. To create a geofence via the ",(0,r.kt)("a",{parentName:"p",href:"https://radar.com/dashboard"},"dashboard"),", go to the ",(0,r.kt)("a",{parentName:"p",href:"https://radar.com/dashboard/geofences"},"Geofences page")," and click the ",(0,r.kt)("em",{parentName:"p"},"New")," button. Search for an address or a place, then enter a ",(0,r.kt)("inlineCode",{parentName:"p"},"description"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"tag"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"external ID"),", and optional ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata")," as shown below."),(0,r.kt)("p",null,(0,r.kt)("img",{className:"large",src:"https://images.ctfassets.net/8lppgnrkmboj/1kYTXDCHc6fACgEj0E1VC5/2183d5f78001f442221c87ad6a51c9f6/Screen_Shot_2022-08-29_at_3.42.29_PM.png"})),(0,r.kt)("h3",{id:"step-2-install-the-radar-ios-sdk"},"Step 2: Install the Radar iOS SDK"),(0,r.kt)("p",null,"Create an Xcode project with a SwiftUI interface, named ",(0,r.kt)("inlineCode",{parentName:"p"},"DeliveryTracker"),"."),(0,r.kt)("p",null,"The recommended method of installing the iOS SDK is with Cocoapods. See the ",(0,r.kt)("a",{parentName:"p",href:"/sdk/ios#install-sdk"},"iOS SDK")," docs for alternatives."),(0,r.kt)("p",null,"Install ",(0,r.kt)("a",{parentName:"p",href:"https://cocoapods.org"},"CocoaPods"),". If you don't have an existing ",(0,r.kt)("inlineCode",{parentName:"p"},"Podfile"),", run ",(0,r.kt)("inlineCode",{parentName:"p"},"pod init")," in your project directory. Add the following to your ",(0,r.kt)("inlineCode",{parentName:"p"},"Podfile"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"pod 'RadarSDK', '~> 3.5.0'\n")),(0,r.kt)("p",null,"Then, run ",(0,r.kt)("inlineCode",{parentName:"p"},"pod install"),". You may also need to run ",(0,r.kt)("inlineCode",{parentName:"p"},"pod repo update"),"."),(0,r.kt)(o.Z,{alertType:"info",mdxType:"Alert"},"After installing, close your project, and open the .xcodeworkspace instead. in Xcode instead of the ",(0,r.kt)("code",null,".xcproject")," file."),(0,r.kt)("h3",{id:"step-3-initialize-the-sdk"},"Step 3: Initialize the SDK"),(0,r.kt)("p",null,"Create a new Swift file named ",(0,r.kt)("inlineCode",{parentName:"p"},"LocationManager.swift"),", where we define a ",(0,r.kt)("inlineCode",{parentName:"p"},"LocationManager")," class to handle location-related logic, and create a shared instance to be used across the app. Initialize the SDK in this class with your publishable ",(0,r.kt)("a",{parentName:"p",href:"https://radar.com/dashboard"},"API key"),", and set this class to be the ",(0,r.kt)("inlineCode",{parentName:"p"},"CLLocationManager")," delegate."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'import Foundation\nimport RadarSDK\n\nclass LocationManager: NSObject, ObservableObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n    static let shared = LocationManager()\n    \n    override init() {\n\n        super.init()\n        Radar.initialize(publishableKey: "prj_test_pk_...")\n\n        self.locationManager.delegate = self\n    }\n}\n')),(0,r.kt)("p",null,"Finally, add an @ObservedObject property to the ",(0,r.kt)("inlineCode",{parentName:"p"},"DeliveryTrackerApp")," class in ",(0,r.kt)("inlineCode",{parentName:"p"},"DeliveryTrackerApp.swift")," as shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"@ObservedObject var locationManager = LocationManager.shared\n")),(0,r.kt)("h3",{id:"step-4-request-location-permissions"},"Step 4: Request location permissions"),(0,r.kt)("p",null,"Before requesting permissions, you must add location usage strings to the custom iOS Target Properties found in the Info tab of the app settings. To request foreground permissions in the app, add a new property with the key ",(0,r.kt)("inlineCode",{parentName:"p"},"NSLocationWhenInUseUsageDescription")," (",(0,r.kt)("em",{parentName:"p"},"Privacy - Location When In Use Usage Description"),"). The value is displayed in the location permission prompts. Enter a message such as ",(0,r.kt)("inlineCode",{parentName:"p"},"Your location will be used to share ETA and arrival notifications to customers"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{className:"large",src:"https://images.ctfassets.net/8lppgnrkmboj/4pAq86XYVNhXq27DTfzUAi/f41c1bcf60cb0266c37c7970f4c27e12/updatedinfoplist.gif"})),(0,r.kt)("p",null,"Then, request these permissions in the app by adding the following into the ",(0,r.kt)("inlineCode",{parentName:"p"},"LocationManager")," class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        self.requestLocationPermissions()\n}\n\nfunc requestLocationPermissions() {\n    let status = CLLocationManager.authorizationStatus()\n\n    if status == .notDetermined {\n        self.locationManager.requestWhenInUseAuthorization()\n    }\n\n    if status == .authorizedAlways || status == .authorizedWhenInUse {\n        print("Location permissions granted")\n    }\n}\n')),(0,r.kt)("h3",{id:"checkpoint-launch-app-and-grant-location-permissions"},"Checkpoint: Launch app and grant location permissions!"),(0,r.kt)("p",null,"At this point, you should be able to launch the app and see a prompt asking for location permissions. Accept these permissions!"),(0,r.kt)("p",null,"If you are following the step-by-step app implementation in this tutorial, let's set up the sample app skeleton at this point. Copy these SwiftUI view files from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/radarlabs/deliverytracker"},"source code")," or this ",(0,r.kt)("a",{parentName:"p",href:"https://assets.ctfassets.net/8lppgnrkmboj/2K0sMrIXqlLpMaf5fEZoTL/883324a82709279dbb966180344135f8/tutorial-files.zip"},"zip file")," into your project: ",(0,r.kt)("inlineCode",{parentName:"p"},"JobListView.swift"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"DispatchJobView.swift"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"AcceptedJobDetailView.swift"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"JobCard.swift"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"JobDetailView.swift"),". Copy over ",(0,r.kt)("inlineCode",{parentName:"p"},"Job.swift")," as well, which defines the Job struct and contains sample jobs. Then in ",(0,r.kt)("inlineCode",{parentName:"p"},"DeliveryTrackerApp.swift"),", set ",(0,r.kt)("inlineCode",{parentName:"p"},"JobListView")," to be the scene in the App body:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"var body: some Scene {\n      WindowGroup {\n          JobListView()\n      }\n}\n")),(0,r.kt)("p",null,"In the next few steps, we will set up trip tracking capabilities to power these skeleton components."),(0,r.kt)("h3",{id:"step-5-add-trip-start-logic"},"Step 5: Add trip start logic"),(0,r.kt)("p",null,"When a delivery starts, we create a trip to the destination geofence and start tracking the live location for the user. From the source code, ",(0,r.kt)("inlineCode",{parentName:"p"},"DispatchJobDetailView.swift")," contains the button to start a trip for a given job. We will now define its action ",(0,r.kt)("inlineCode",{parentName:"p"},"startOrStopTrip")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"LocationManager")," class."),(0,r.kt)("p",null,"The button action contains trip start logic (and trip cancel logic for in progress trips) as shown below. We use a uuid for the trip ",(0,r.kt)("inlineCode",{parentName:"p"},"externalId"),", although existing delivery ids should be used here when applicable. Set your destination geofence from ",(0,r.kt)("a",{parentName:"p",href:"/tutorials/building-a-delivery-tracking-app#step-1-set-up-your-radar-account"},"Step 1"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'@Published var onTrip = false\nvar activeTrip = ""\n\nfunc startOrStopTrip(job: Job) {\n    if !onTrip {\n        let uuid = UUID().uuidString\n        let tripOptions = RadarTripOptions(\n            externalId: String(uuid),\n            // TODO: Fill in geofence from Step 1\n            destinationGeofenceTag:"delivery_location",\n            destinationGeofenceExternalId: "123"\n        )\n        tripOptions.mode = .car\n        tripOptions.metadata = [\n            "Pickup Title": job.title,\n            "Vehicle": "Green Ford pickup truck"\n        ]\n\n        Radar.startTrip(options: tripOptions)\n        print("Trip started", uuid)\n        \n        // TODO: Replace with your test origin and destination locations\n        Radar.mockTracking(\n          origin: CLLocation(latitude: 37.769722, longitude: -122.476944),\n          destination: CLLocation(latitude: 37.7897442, longitude: -122.3972337),\n          mode: .car,\n          steps: 10,\n          interval: 2) { (status, location, events, user) in\n              print("mock track", status, location)\n        }\n        \n        activeTrip = uuid\n        onTrip = true\n\n    } else {\n        Radar.cancelTrip()\n        Radar.stopTracking()\n        print("Trip cancelled", activeTrip)\n        onTrip = false\n    }\n')),(0,r.kt)("p",null,"Notice that we use ",(0,r.kt)("inlineCode",{parentName:"p"},"Radar.mockTracking()")," instead of ",(0,r.kt)("a",{parentName:"p",href:"/api#track"},"track")," for now, which helps simulate a sequence of location updates from an origin to a destination quickly for testing. In this case, we simulate a sequence of 10 location updates, each 2 seconds apart, by car from the ",(0,r.kt)("inlineCode",{parentName:"p"},"origin")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"destination"),"."),(0,r.kt)("h3",{id:"step-6-add-trip-completion-logic"},"Step 6: Add trip completion logic"),(0,r.kt)("p",null,"We will use arrival at the trip destination as a signal that the delivery is complete. To do this, we need to listen for the corresponding event, then complete the trip and stop tracking when it is detected. Update the ",(0,r.kt)("inlineCode",{parentName:"p"},"LocationManager")," to be our ",(0,r.kt)("inlineCode",{parentName:"p"},"RadarDelegate"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"class LocationManager: NSObject, ObservableObject, CLLocationManagerDelegate, RadarDelegate\n")),(0,r.kt)("p",null,"Then, add a ",(0,r.kt)("inlineCode",{parentName:"p"},"didReceiveEvents")," method with trip completion logic when it is called with the ",(0,r.kt)("inlineCode",{parentName:"p"},"userArrivedAtTripDestination")," event type, and add in the other RadarDelegate methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'// RadarDelegate methods\nfunc didReceiveEvents(_ events: [RadarEvent], user: RadarUser?) {\n    for event in events {            \n        if event.type == RadarEventType.userArrivedAtTripDestination {\n            Radar.completeTrip()\n            Radar.stopTracking()\n            print("Trip completed", activeTrip)\n        }\n    }\n}\n\nfunc didUpdateLocation(_ location: CLLocation, user: RadarUser) {\n    return\n}\n    \nfunc didUpdateClientLocation(_ location: CLLocation, stopped: Bool, source: RadarLocationSource) {\n    return\n}\n\nfunc didFail(status: RadarStatus) {\n    return\n}\n\nfunc didLog(message: String) {\n    return\n}\n')),(0,r.kt)("h3",{id:"checkpoint-create-a-trip"},"Checkpoint: Create a trip!"),(0,r.kt)("p",null,"With the steps we've covered so far, you are ready to create your first trip in the app! Run the app, and click the start button in the DispatchJobView. Now head to the ",(0,r.kt)("a",{parentName:"p",href:"https://radar.com/dashboard/trips"},"Trips")," page where you will find all current and past trips. Ensure that a new trip appears in the started state at the top of your dashboard. With mock tracking automatically making progress on the trip in the background, the trip status should change to completed within the next minute."),(0,r.kt)("p",null,(0,r.kt)("img",{className:"large",src:"https://images.ctfassets.net/8lppgnrkmboj/2HpKQDmFmej13PJRdoZH96/080ed748c888a5a20c852d9e164e8583/Screen_Shot_2022-08-29_at_1.28.23_PM.png"})),(0,r.kt)("p",null,"In the final few steps, we will surface the progress of the trip in app by sending notifications on status updates and adding a live map view with an ETA."),(0,r.kt)("h3",{id:"step-7-send-trip-update-notifications"},"Step 7: Send trip update notifications"),(0,r.kt)("p",null,"Next, we will set up notifications for key trip updates. First, in a new file titled ",(0,r.kt)("inlineCode",{parentName:"p"},"NotificationManager.swift"),", define a ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalNotificationManager")," as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'import Foundation\nimport RadarSDK\nimport MapKit\n\nclass LocalNotificationManager: NSObject, ObservableObject, UNUserNotificationCenterDelegate {\n    \n    var notifications = [Notification]()\n    \n    override init() {\n        super.init()\n        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { granted, error in\n            if granted == true && error == nil {\n                print("Notifications permitted")\n            } else {\n                print("Notifications not permitted")\n            }\n        }\n        UNUserNotificationCenter.current().delegate = self\n    }\n    \n    func sendNotification(title: String, subtitle: String?, body: String, launchIn: Double) {\n        let content = UNMutableNotificationContent()\n        content.title = title\n        if let subtitle = subtitle {\n            content.subtitle = subtitle\n        }\n        content.body = body\n    \n        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: launchIn, repeats: false)\n        let request = UNNotificationRequest(identifier: "demoNotification", content: content, trigger: trigger)\n    \n        UNUserNotificationCenter.current().add(request, withCompletionHandler: nil)\n    }\n    \n    func userNotificationCenter(\n      _ center: UNUserNotificationCenter,\n      willPresent notification: UNNotification,\n      withCompletionHandler completionHandler: (UNNotificationPresentationOptions) -> Void\n    ) {\n        completionHandler(.banner)\n    }\n}\n')),(0,r.kt)("p",null,"Then initialize a ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalNotificationManager")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"LocationManager")," class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"var notificationManager = LocalNotificationManager()\n")),(0,r.kt)("p",null,"Finally, we need to update the listener logic from Step 6 in ",(0,r.kt)("inlineCode",{parentName:"p"},"LocationManager")," to the following in order to send notifications:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'func didReceiveEvents(_ events: [RadarEvent], user: RadarUser?) {\n    for event in events {\n        if event.type == RadarEventType.userStartedTrip {\n            self.notificationManager.sendNotification(title: "Your mover is on the way!", subtitle: nil, body: "Your mover is headed toward the pickup location. We will notify you when they are close!", launchIn: 0.1)\n        }\n        if event.type == RadarEventType.userApproachingTripDestination {\n            var eta = 5 // Temporarily placeholder, we will update this in Step 8\n            self.notificationManager.sendNotification(title: "Your mover is approaching!", subtitle: nil, body: "Your mover is " + String(eta) + " minutes away. Get ready to meet them at the pickup location.", launchIn: 0.1)\n        }\n        \n        if event.type == RadarEventType.userArrivedAtTripDestination {\n            self.notificationManager.sendNotification(title: "Your mover is here!", subtitle: nil, body: "Meet them and get going with your pick up!", launchIn: 0.1)\n            \n            Radar.completeTrip()\n            Radar.stopTracking()\n        }\n    }\n}\n')),(0,r.kt)("p",null,"You should now see notifications as a trip progresses!"),(0,r.kt)("p",{className:"text--center"},(0,r.kt)("img",{className:"large",src:"https://images.ctfassets.net/8lppgnrkmboj/3NIihQVE7r83Yb4H9umdhZ/606219a3279dd989e32aac700ffbdd29/approachingnotification_sampleapp.png"})),(0,r.kt)("h3",{id:"step-8-display-live-map-location-and-eta"},"Step 8: Display live map location and ETA"),(0,r.kt)("p",null,"Lastly, we will create a map view with live location tracking for the ongoing trip, complete with a live ETA."),(0,r.kt)("p",null,"Create this map view in a new view file named ",(0,r.kt)("inlineCode",{parentName:"p"},"TrackMapView.swift")," with the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'import SwiftUI\nimport MapKit\n\nstruct TrackMapView: View {\n    @ObservedObject var locationManager = LocationManager.shared\n    var body: some View {\n        NavigationView {\n            VStack {\n                Map(coordinateRegion: $locationManager.region, showsUserLocation: true, annotationItems: locationManager.currentLocation == nil ? [] :\n                        [Marker(location: MapMarker(coordinate: locationManager.currentLocation!.coordinate, tint: .red))])\n                {\n                    marker in marker.location\n                }.ignoresSafeArea()\n                .accentColor(Color(.systemBlue))\n                    \n                Text("ETA: \\(locationManager.eta) minutes")\n                    .font(.headline)\n                    .foregroundColor(.accentColor)\n                    \n            }\n        }\n    }\n}\n')),(0,r.kt)("p",null,"This view uses the shared instance of the location manager as an observed variable to refresh the map markers, region, and ETA when there are location updates. Now, update the ",(0,r.kt)("inlineCode",{parentName:"p"},"LocationManager")," with definitions for the published variables that will hold this information, and a create a new method named ",(0,r.kt)("inlineCode",{parentName:"p"},"updateCurrentLocation")," to handle location updates as shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"@Published var region = MKCoordinateRegion(center: CLLocationCoordinate2D(\n    latitude: 37.7897, longitude: -122.3972\n), span: MKCoordinateSpan(\n    latitudeDelta: 0.1, longitudeDelta: 0.1\n))\n@Published var eta = 0\n@Published var currentLocation: CLLocation?\n\nfunc updateCurrentLocation(event: RadarEvent) {\n    currentLocation = event.location\n    region = MKCoordinateRegion(center: event.location.coordinate, span: MKCoordinateSpan(\n        latitudeDelta: 0.1, longitudeDelta: 0.1))\n    if event.trip != nil {\n        eta = Int(event.trip!.etaDuration)\n    }\n}\n")),(0,r.kt)("p",null,"Finally, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"updateCurrentLocation")," method in ",(0,r.kt)("inlineCode",{parentName:"p"},"didReceiveEvents")," for trip events."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'func didReceiveEvents(_ events: [RadarEvent], user: RadarUser?) {\n    for event in events {\n        \n        if event.type == RadarEventType.userStartedTrip {\n            updateCurrentLocation(event: event)\n            \n            self.notificationManager.sendNotification(title: "Your mover is on the way!", subtitle: nil, body: "Your mover is headed toward the pickup location. We will notify you when they are close!", launchIn: 0.1)\n        }\n        if event.type == RadarEventType.userApproachingTripDestination {\n            updateCurrentLocation(event: event)\n            \n            self.notificationManager.sendNotification(title: "Your mover is approaching!", subtitle: nil, body: "Your mover is " + String(eta) + " minutes away. Get ready to meet them at the pickup location.", launchIn: 0.1)\n        }\n        \n        if event.type == RadarEventType.userArrivedAtTripDestination {\n            updateCurrentLocation(event: event)\n            \n            self.notificationManager.sendNotification(title: "Your mover is here!", subtitle: nil, body: "Meet them and get going with your pick up!", launchIn: 0.1)\n            \n            Radar.completeTrip()\n            Radar.stopTracking()\n            print("Trip completed", activeTrip)\n        }\n        \n        if event.type == RadarEventType.userUpdatedTrip {\n            updateCurrentLocation(event: event)\n        }\n    }\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"currentLocation"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"region"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"eta")," variables update with events in the listener logic, and the map view refreshes as they change. You should now see the live map view and ETAs for your trips in the app!"),(0,r.kt)("p",{className:"text--center"},(0,r.kt)("video",{width:"450",height:"976",controls:!0},(0,r.kt)("source",{src:"https://videos.ctfassets.net/8lppgnrkmboj/57IsKRqArgn2sZta5Qs4nX/361764bc0f9688c4c2a729c4d3ea4a05/mapviewvideo_sampleapp.mp4",type:"video/mp4"}),"Your browser does not support the video tag.")),(0,r.kt)("h3",{id:"step-9-next-steps"},"Step 9: Next steps"),(0,r.kt)("p",null,"Congratulations on finishing the tutorial! This is an illustrative example to get started with ",(0,r.kt)("a",{parentName:"p",href:"/trip-tracking"},"trip tracking"),". Here are some next steps and considerations before using these features in a production setting:"),(0,r.kt)("p",null,"1) On trip start, replace the mock tracking call with ",(0,r.kt)("inlineCode",{parentName:"p"},"Radar.startTracking")," in the application that delivery drivers to be tracked will be using."),(0,r.kt)("p",null,"2) Set trip destinations to geofences with delivery locations instead of the test geofence. Geofences can also be created programmatically via the ",(0,r.kt)("a",{parentName:"p",href:"/api#upsert-a-geofence"},"geofence upsert API"),"."),(0,r.kt)("p",null,"3) Use ",(0,r.kt)("a",{parentName:"p",href:"integrations/braze"},"Braze")," to send push instead of local notifications to other users with different devices."),(0,r.kt)("p",null,"Explore resources on the ",(0,r.kt)("a",{parentName:"p",href:"/trip-tracking"},"Trip Tracking page"),", ",(0,r.kt)("a",{parentName:"p",href:"/api"},"API documentation"),", and ",(0,r.kt)("a",{parentName:"p",href:"/sdk"},"SDK guides")," for more information."),(0,r.kt)("h2",{id:"support"},"Support"),(0,r.kt)("p",null,"Have questions or feedback on this documentation? Let us know! Contact us at ",(0,r.kt)("a",{parentName:"p",href:"https://radar.com/support"},"radar.com/support"),"."))}u.isMDXComponent=!0}}]);